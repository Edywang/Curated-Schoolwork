head	1.1;
access;
symbols;
locks;
comment	@# @;


1.1
date	2020.11.23.02.02.15;	author -;	state -;
branches;
next	;


desc
@@


1.1
log
@-
@
text
@#!/usr/bin/perl
# $Id: printstatus.perl,v 1.6 2020-11-22 18:02:01-08 - - $
#
# Copy code from this file in order to print an exit status.
#
use strict;
use warnings;

# sigtoperl: x86_64 Linux unix1.lt.ucsc.edu
# sigtoperl: Sun Nov 22 17:33:55 2020
my %strsignal = (
    0 => "Unknown signal 0",
    1 => "Hangup",
    2 => "Interrupt",
    3 => "Quit",
    4 => "Illegal instruction",
    5 => "Trace/breakpoint trap",
    6 => "Aborted",
    7 => "Bus error",
    8 => "Floating point exception",
    9 => "Killed",
   10 => "User defined signal 1",
   11 => "Segmentation fault",
   12 => "User defined signal 2",
   13 => "Broken pipe",
   14 => "Alarm clock",
   15 => "Terminated",
   16 => "Stack fault",
   17 => "Child exited",
   18 => "Continued",
   19 => "Stopped (signal)",
   20 => "Stopped",
   21 => "Stopped (tty input)",
   22 => "Stopped (tty output)",
   23 => "Urgent I/O condition",
   24 => "CPU time limit exceeded",
   25 => "File size limit exceeded",
   26 => "Virtual timer expired",
   27 => "Profiling timer expired",
   28 => "Window changed",
   29 => "I/O possible",
   30 => "Power failure",
   31 => "Bad system call",
);

#
# See man -s 2 wait for an explanation.
#
sub status_string ($) {
   my ($status) = @@_;
   return undef unless $status;
   printf "0x%08X\n", $status;
   print $status & 0xFF, "\n";
   return sprintf "Error %d", $status >> 8 if ($status & 0xFF) == 0;
   my $message = $strsignal{$status & 0x7F} || "Invalid Signal Number";
   $message .= " (core dumped)" if $status & 0x80;
   return $message;
}

#
# What you need is the hash and the function.
# The following is just a dummy main function for testing.
#

system "@@ARGV";
printf "0x%04X %s\n", $?, status_string $? if $?;

@
